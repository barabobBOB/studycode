"""
검색 알고리즘
주소록을 검색한다는 가정을 만들어보자
1. 국적이 한국사람
2. 나이가 21세 이상 27세 미만
3. 이름에 '민'자가 들어간 사람

이 검색 조건 모두 어떠한 항목에 주목하고 있다. 주목하고 있는 항목을 key라고 부른다
국적으로 검색하는경우 키는 국적
나이로 검색하는 경우 나이
대부분의 키는 데이터의 일부라고 할 수 있다.. 다시말해서 주소록 검색 조건을 수행하려면 다음과 같은 키를 지정
국적 -> 키값과 일치하도록 지정
나이 -> 키값의 구간을 지정
문자 -> 키값에 가깝도록 지정한다.

검색에서는 이러한 조건을 하나만 지정할 수 있고 논리곱 논리합을 이용해서 지정할 수 있다.
1. 선형 검색 : 무작위로 늘어놓은 데이터 집합에서 검색을 수행
2. 이진 검색 : 일정한 규칙으로 늘어놓은 데이터 집합에서 아주 빠른 검색을 수행함
3. 해시법 : 추가 삭제가 자주 일어나는 데이터 집합에서 성능이 좋다.
    체인법 : 같은 해시값 데이터를 연결 리스트로 연결하는 방법
    오픈 주소법 : 데이터를 위한 해시값이 충돌할 때 재해시 하는 방법

데이터 집합이 있을 때 '검색만 잘되면 좋지!'라고 생각하면 검색 시간이 짧은 알고리즘을 선택하면
그만이다.

예를 들어 데이터를 자주 추가해야 한다면 검색을 아주 빠르게 수행하는 알고리즘이라도 데이터를 추가
할때 비용이 많이 들면 피하는 게 좋음

결론 -> 상황에 맞춰서 알고리즘을 사용할 줄 알아야한다.
"""
from typing import Any, Sequence


def seq_search(a: Sequence, key: Any) -> int:  # 원소를 찾는 함수 
    """시퀀스 a에서 key와 같이 원소를 선형 검색"""
    i = 0

    while True:
        if i == len(a):
            return -1  # 검색에 실패 했을 시 -1 반환 
        if a[i] == key:
            return i   # 검색에 성공했을 시 1 반환  
        i += 1  
        

if __name__ == "__main__":
    num = int(input('원소 수를 입력하세요 --> '))  
    x = [None] * num
    
    for i in range(num):
        x[i] = int(input(f'원소 x[{i}]를 입력하세요 -->')) 
    
    key = int(input('검색할 키는 무엇인가요? --> '))
    
    idx = seq_search(x, key)
    
    if idx == -1:
        print('찾는 원소가 없습니다')
    else:
        print(f'찾는 원소의 위치는 x[{idx}]에 있습니다')